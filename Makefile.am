# 
# Main executable's Makefile.
# 

ACLOCAL_AMFLAGS = -I m4-project

# Example varaibles generated by the Boost macros.
# BOOST_CPPFLAGS = -I/usr/include
# BOOST_ASIO_LIB = -lboost_system-mt
# BOOST_DATE_TIME_LIB = -lboost_date_time-mt
# BOOST_LDFLAGS = -L/usr/lib

# If we've gotten so far in the build process, C++ 0x std should
# be guaranteed and therefore it's safe to enable ASIO move.
# AM_CFLAGS = $(PTHREAD_CFLAGS)
# AM_CXXFLAGS = -DBOOST_ASIO_HAS_MOVE

AM_CFLAGS = -I$(top_srcdir)/include
AM_CXXFLAGS = $(BOOST_CPPFLAGS) -I$(top_srcdir)/include
AM_LDFLAGS = $(BOOST_LDFLAGS)

# Logging lib requires Boost's atomic, probably because it's multi-threaded.
AM_BOOST_LIBS = $(BOOST_SYSTEM_LIB) \
            $(BOOST_FILESYSTEM_LIB) \
            $(BOOST_DATE_TIME_LIB) \
            $(BOOST_CHRONO_LIB) \
            $(BOOST_LOG_LIB) -lboost_atomic \
            $(BOOST_THREAD_LIB) \
            $(BOOST_REGEX_LIB)

pch_files = *.h.?ch *.h.?ch

bin_PROGRAMS = fishy
fishy_SOURCES = src/main.cc \
            src/asset/resource.cc \
            src/asset/collada.cc \
            src/game.cc \
            src/renderer-opengl.cc

fishy_CFLAGS = $(AM_CFLAGS) $(CFLAGS_PCH)
fishy_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_PCH)
fishy_LDADD = $(LDADD) $(AM_BOOST_LIBS)

# PCH_FILENAME = std.h.(pch|gch)
# AM error: configure substitutions are not allowed in _SOURCES variables
nodist_fishy_SOURCES = $(pch_files)

# noinst_PROGRAMS = tests

# Tests portion
# tests_SOURCES = src/tests/tests.cc \
#             src/tests/boost_string_view.cc \
#             src/exception.cc \
#             src/asset/resource.cc \
#             src/asset/collada.cc \
#             src/game.cc \
#             src/renderer.cc

# tests_CFLAGS = $(AM_CFLAGS) $(CFLAGS_PCH)
# tests_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_PCH)
# tests_LDADD = $(LDADD) $(AM_BOOST_LIBS)
# nodist_tests_SOURCES = $(pch_files)

BUILT_SOURCES = $(abs_top_builddir)/data $(PCH_FILENAME)
CLEANFILES = $(pch_files)

# Precompiled header file.
$(PCH_FILENAME): $(PCH_SOURCE)
	@printf "%s\n" "-----------------------------------------------------"
	@printf "%s: %s\n" "Create precompiled header: " $<
	$(CXXCOMPILE) -x c++-header -c $< -o $@
	@printf "%s\n" "-----------------------------------------------------"

$(abs_top_builddir)/data:
	if [ ! -d $(abs_top_builddir)/data ]; then \
		ln -s $(abs_top_srcdir)/data $(abs_top_builddir)/data; \
	fi;
